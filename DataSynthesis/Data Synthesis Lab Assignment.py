# -*- coding: utf-8 -*-
"""DataEng S25 - Data Synthesis Lab Assignment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CAIaG-pxhhrXq42y0aU-Dp_0a4WiwObU

1. Synthetic Employee Data
Use Faker and other appropriate python features to create emp_df, a synthetic employee dataset (DataFrame) containing 10,000 employees. The data should have these columns:
"""

!pip install Faker

import pandas as pd
import numpy as np
from faker import Faker
import random

# Load department and role/salary data
departments_df = pd.read_excel('/content/drive/MyDrive/Data Engineering - CS510/Lab Assignments for Xiangqian Zhang/Departments Roles and Salaries.xlsx', sheet_name='Departments')
roles_salaries_df = pd.read_excel('/content/drive/MyDrive/Data Engineering - CS510/Lab Assignments for Xiangqian Zhang/Departments Roles and Salaries.xlsx', sheet_name='RolesAndSalaries')

# Set random seeds for reproducibility
np.random.seed(42)
random.seed(42)
fake = Faker()

# 1. Assign departments to 10,000 employees based on % weights
n_employees = 10000
departments = departments_df['Department'].tolist()
dept_weights = departments_df['% of employees'].values
dept_weights = dept_weights / np.sum(dept_weights)  # ensure it sums to 1

employee_departments = np.random.choice(departments, size=n_employees, p=dept_weights)

# 2. For each employee, assign a random role from their department
emp_data = []
genders = ['Male', 'Female', 'Other']
countries = ['USA', 'India', 'China', 'Mexico', 'Canada', 'Philippines', 'Taiwan', 'South Korea']
country_weights = [0.7, 0.07, 0.06, 0.05, 0.04, 0.03, 0.025, 0.025]

for i in range(n_employees):
    dept = employee_departments[i]
    roles_for_dept = roles_salaries_df[roles_salaries_df['Department'] == dept]
    if len(roles_for_dept) == 0:
        # fallback: pick any role if department not in RolesAndSalaries
        role_row = roles_salaries_df.sample(1).iloc[0]
    else:
        role_row = roles_for_dept.sample(1).iloc[0]
    role = role_row['Role']
    salary = np.random.uniform(role_row['Lower'], role_row['Upper'])
    emp = {
        'employeeID': i + 1,
        'CountryOfBirth': np.random.choice(countries, p=country_weights),
        'name': fake.name(),
        'phone': fake.phone_number(),
        'email': fake.email(),
        'gender': random.choice(genders),
        'birthdate': fake.date_of_birth(minimum_age=18, maximum_age=65),
        'hiredate': fake.date_between(start_date='-20y', end_date='today'),
        'department': dept,
        'role': role,
        'salary': round(salary, 2),
        'SSID': fake.ssn()
    }
    emp_data.append(emp)

emp_df = pd.DataFrame(emp_data)

print(emp_df.head())

"""2.
Show a screenshot of the output of emp_df.describe(include=’all’)

Show a screenshot of the output of emp_df.head(10)

How much will this company pay in yearly payroll?

"""

print(emp_df.describe(include='all'))

total_payroll = emp_df['salary'].sum()
print(f"Total yearly payroll: ${total_payroll:,.2f}")

"""3. Provide screenshots of each of the following. Display each visualization on its own slide.

A bar chart displaying counts of each CountryOfBirth. Order the bars from most frequent country to least frequent.

"""

import matplotlib.pyplot as plt

# Count occurrences of each country
country_counts = emp_df['CountryOfBirth'].value_counts()

# Create a bar chart of all countries (or top N for clarity, e.g., top 20)
plt.figure(figsize=(36,18))
country_counts.plot(kind='bar')
plt.title('Countries of Birth')
plt.xlabel('Country')
plt.ylabel('Number of Employees')
plt.tight_layout()
plt.show()

"""B. A bar chart displaying employee counts for each Department. Order the bars from largest department to smallest."""

# Count the number of employees in each department
dept_counts = emp_df['department'].value_counts()

# Bar chart: Departments ordered from largest to smallest
plt.figure(figsize=(10, 6))
dept_counts.plot(kind='bar')
plt.title('Employee Count by Department')
plt.xlabel('Department')
plt.ylabel('Number of Employees')
plt.tight_layout()
plt.show()

"""C. A bar chart with X axis of “day of the week” showing all seven days of the week. The Y axis represents the number of employees hired on each day of the week."""

# Convert 'hiredate' to day of week names
emp_df['hire_dayofweek'] = pd.to_datetime(emp_df['hiredate']).dt.day_name()

# Count hires per day of the week, reindex for Monday-Sunday order
days_order = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
hire_day_counts = emp_df['hire_dayofweek'].value_counts().reindex(days_order, fill_value=0)

plt.figure(figsize=(8,5))
hire_day_counts.plot(kind='bar')
plt.title('Employees Hired by Day of the Week')
plt.xlabel('Day of the Week')
plt.ylabel('Number of Employees')
plt.tight_layout()
plt.show()

"""D. A KDE plot of salaries

"""

plt.figure(figsize=(8,5))
emp_df['salary'].plot(kind='kde')
plt.title('KDE Plot of Salaries')
plt.xlabel('Salary')
plt.ylabel('Density')
plt.tight_layout()
plt.show()

"""E. A line plot showing number of birthdates over time. The X axis shows the years from earliest birth year to most recent, and the Y axis represents the number of employees born in each year.

"""

# Extract birth year from 'birthdate'
emp_df['birth_year'] = pd.to_datetime(emp_df['birthdate']).dt.year

# Count number of employees born each year, sorted by year
birth_year_counts = emp_df['birth_year'].value_counts().sort_index()

plt.figure(figsize=(10, 5))
birth_year_counts.plot(kind='line', marker='o')
plt.title('Number of Employees Born Each Year')
plt.xlabel('Birth Year')
plt.ylabel('Number of Employees')
plt.tight_layout()
plt.show()

"""F. A single diagram with KDE plots of salaries for each Department.

"""

import seaborn as sns

plt.figure(figsize=(12, 6))

# KDE plot for salaries by department, all in one plot
sns.kdeplot(data=emp_df, x='salary', hue='department', common_norm=False, fill=True, alpha=0.3)

plt.title('KDE Plot of Salaries by Department')
plt.xlabel('Salary')
plt.ylabel('Density')
plt.tight_layout()
plt.show()

"""4. Sampling
Use DataFrame sample() to produce a new 500 element sample of the data from emp_df.  Use the weights parameter to synthetically bias the sample such that employees with ages 40-49 are three times as likely to be sampled as employees in other age ranges. Name this new DataFrame smpl_df

Show a screenshot of the output of smpl_df.describe(include=’all’)
"""

import pandas as pd

# Calculate each employee's age
today = pd.Timestamp('today')
emp_df['age'] = (today - pd.to_datetime(emp_df['birthdate'])).dt.days // 365

# Assign sampling weights: age 40–49 gets 3, others get 1
weights = emp_df['age'].apply(lambda x: 3 if 40 <= x <= 49 else 1)

# Sample 500 employees with the bias
smpl_df = emp_df.sample(n=500, weights=weights, random_state=42)

# Show summary and first 10 rows
print(smpl_df.describe(include='all'))

print(smpl_df.head(10))

"""5. Perturbation
Perturb the salary values of emp_df using Gaussian noise to produce a new DataFrame named prtrb_df

How might you choose the standard deviation parameter for the noise?

"""

# Choose stddev as 5% of the mean salary
stddev = emp_df['salary'].mean() * 0.05

# Add Gaussian noise to salary
prtrb_df = emp_df.copy()
prtrb_df['salary'] = prtrb_df['salary'] + np.random.normal(0, stddev, len(emp_df))
prtrb_df['salary'] = prtrb_df['salary'].round(2)

"""B. Show a screenshot of the output of prtrb_df.head(10)"""

print(prtrb_df.describe(include='all'))

print(prtrb_df.head(10))

"""6. Quality of the Synthetic Dataset (Graduate Students only)
Use ydata-profiling to explore your synthetic data set. Like this:
!pip install ydata-profiling
from ydata_profiling import ProfileReport
profile = ProfileReport(emp_df, title="Employee Data Profile", explorative=True)
profile.to_notebook_iframe()

"""

!pip install ydata-profiling
from ydata_profiling import ProfileReport
profile = ProfileReport(emp_df, title="Employee Data Profile", explorative=True)
profile.to_notebook_iframe()

from google.colab import files
files.download("Employee_Data_Profile.html")
